$(function(){
    var data = [
        {
            "businessName": "前端框架",
            "children": [
                {
                    "name": "vue组件传值",
                    "detailOption": [
                        {
                            "name": "情景分类",
                            "description": "<p style=\"box-sizing: border-box; outline: 0px; margin-bottom: 16px; font-family: &quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif; font-size: 16px; color: rgb(77, 77, 77); line-height: 26px; overflow-x: auto; overflow-wrap: break-word; background-color: rgb(255, 255, 255);\">1、父组件传值给子组件-------&gt;使用props属性接收</p><p style=\"box-sizing: border-box; outline: 0px; margin-bottom: 16px; font-family: &quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif; font-size: 16px; color: rgb(77, 77, 77); line-height: 26px; overflow-x: auto; overflow-wrap: break-word; background-color: rgb(255, 255, 255);\">2、子组件传值给父组件--------&gt;子组件通过$emit传递，父组件通过@属性名称接收</p><p style=\"box-sizing: border-box; outline: 0px; margin-bottom: 16px; font-family: &quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif; font-size: 16px; color: rgb(77, 77, 77); line-height: 26px; overflow-x: auto; overflow-wrap: break-word; background-color: rgb(255, 255, 255);\">3、父组件，子组件，兄弟组件相互传值------&gt;需要bus中央总线，相当于一个中介</p>"
                        },
                        {
                            "name": "具体实例",
                            "description": "<span style=\"color: rgb(79, 79, 79); font-family: &quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif; font-size: 16px; background-color: rgb(238, 240, 244);\">1、父组件传值给子组件-------&gt;使用props属性接收</span><div><div style=\"color: rgb(212, 212, 212); background-color: rgb(30, 30, 30); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; line-height: 19px; white-space: pre;\"><div><span style=\"color: #808080;\">&lt;!</span><span style=\"color: #569cd6;\">DOCTYPE</span> <span style=\"color: #9cdcfe;\">html</span><span style=\"color: #808080;\">&gt;</span></div><div><span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">html</span> <span style=\"color: #9cdcfe;\">lang</span>=<span style=\"color: #ce9178;\">\"en\"</span><span style=\"color: #808080;\">&gt;</span></div><div><span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">head</span><span style=\"color: #808080;\">&gt;</span></div><div>    <span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">meta</span> <span style=\"color: #9cdcfe;\">charset</span>=<span style=\"color: #ce9178;\">\"UTF-8\"</span><span style=\"color: #808080;\">&gt;</span></div><div>    <span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">title</span><span style=\"color: #808080;\">&gt;</span>Title<span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">title</span><span style=\"color: #808080;\">&gt;</span></div><div><span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">head</span><span style=\"color: #808080;\">&gt;</span></div><div><span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">body</span><span style=\"color: #808080;\">&gt;</span></div><div>    <span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">div</span> <span style=\"color: #9cdcfe;\">id</span>=<span style=\"color: #ce9178;\">\"app\"</span><span style=\"color: #808080;\">&gt;</span></div><div>        //1.此处通过v-bind(简写为冒号:)来绑定</div><div>        <span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">my-component</span> <span style=\"color: #9cdcfe;\">:message</span>=<span style=\"color: #ce9178;\">\"message\"</span><span style=\"color: #808080;\">&gt;&lt;/</span><span style=\"color: #569cd6;\">my-component</span><span style=\"color: #808080;\">&gt;&lt;</span><span style=\"color: #569cd6;\">br</span><span style=\"color: #808080;\">&gt;</span></div><div>    <span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">div</span><span style=\"color: #808080;\">&gt;</span></div><div>    <span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">script</span> <span style=\"color: #9cdcfe;\">src</span>=<span style=\"color: #ce9178;\">\"vue.min.js\"</span><span style=\"color: #808080;\">&gt;</span><span style=\"color: #808080;\">&lt;</span><span style=\"color: #808080;\">/</span><span style=\"color: #569cd6;\">script</span><span style=\"color: #808080;\">&gt;</span></div><div>    <span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">script</span><span style=\"color: #808080;\">&gt;</span></div><div> </div><div>        <span style=\"color: #9cdcfe;\">Vue</span>.<span style=\"color: #dcdcaa;\">component</span>(<span style=\"color: #ce9178;\">'my-component'</span>,{</div><div>            <span style=\"color: #6a9955;\">//2.通过props接受父组件传给子组件的值</span></div><div>            <span style=\"color: #9cdcfe;\">props:</span>[<span style=\"color: #ce9178;\">'message'</span>],</div><div>            <span style=\"color: #9cdcfe;\">template:</span><span style=\"color: #ce9178;\">'&lt;span&gt;|||我接收的值是|||：{{message}}&lt;/span&gt;'</span>,</div><div>        })</div><div>        <span style=\"color: #569cd6;\">var</span> <span style=\"color: #9cdcfe;\">app</span> = <span style=\"color: #569cd6;\">new</span> <span style=\"color: #4ec9b0;\">Vue</span>({</div><div>            <span style=\"color: #9cdcfe;\">el:</span><span style=\"color: #ce9178;\">'#app'</span>,</div><div>            <span style=\"color: #9cdcfe;\">data:</span>{</div><div>                <span style=\"color: #9cdcfe;\">message:</span><span style=\"color: #ce9178;\">'我是父组件要传给子组件的值'</span></div><div>            }</div><div>        })</div><div>    <span style=\"color: #808080;\">&lt;</span><span style=\"color: #808080;\">/</span><span style=\"color: #569cd6;\">script</span><span style=\"color: #808080;\">&gt;</span></div><div><span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">body</span><span style=\"color: #808080;\">&gt;</span></div><div><span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">html</span><span style=\"color: #808080;\">&gt;</span></div><div><span style=\"color: #808080;\"><br></span></div></div></div><span style=\"color: rgb(79, 79, 79); font-family: &quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif; font-size: 16px; background-color: rgb(238, 240, 244);\">2、子组件传值给父组件--------&gt;子组件通过$emit传递，父组件通过@属性名称接收</span><div><span style=\"color: rgb(79, 79, 79); font-family: &quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif; font-size: 16px; background-color: rgb(238, 240, 244);\"><br></span></div><div><div style=\"color: rgb(212, 212, 212); background-color: rgb(30, 30, 30); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; line-height: 19px; white-space: pre;\"><div><span style=\"color: #808080;\">&lt;!</span><span style=\"color: #569cd6;\">DOCTYPE</span> <span style=\"color: #9cdcfe;\">html</span><span style=\"color: #808080;\">&gt;</span></div><div><span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">html</span> <span style=\"color: #9cdcfe;\">lang</span>=<span style=\"color: #ce9178;\">\"en\"</span><span style=\"color: #808080;\">&gt;</span></div><div><span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">head</span><span style=\"color: #808080;\">&gt;</span></div><div>    <span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">meta</span> <span style=\"color: #9cdcfe;\">charset</span>=<span style=\"color: #ce9178;\">\"UTF-8\"</span><span style=\"color: #808080;\">&gt;</span></div><div>    <span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">title</span><span style=\"color: #808080;\">&gt;</span>Title<span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">title</span><span style=\"color: #808080;\">&gt;</span></div><div><span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">head</span><span style=\"color: #808080;\">&gt;</span></div><div><span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">body</span><span style=\"color: #808080;\">&gt;</span></div><div>    <span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">div</span> <span style=\"color: #9cdcfe;\">id</span>=<span style=\"color: #ce9178;\">\"app\"</span><span style=\"color: #808080;\">&gt;</span></div><div>        //2.父组件通过@来接受，然后通过getMsg方法来处理数据</div><div>        <span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">my-component</span> <span style=\"color: #9cdcfe;\">@message</span>=<span style=\"color: #ce9178;\">\"getMsg\"</span><span style=\"color: #808080;\">&gt;&lt;/</span><span style=\"color: #569cd6;\">my-component</span><span style=\"color: #808080;\">&gt;&lt;</span><span style=\"color: #569cd6;\">br</span><span style=\"color: #808080;\">&gt;</span></div><div>        <span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">span</span><span style=\"color: #808080;\">&gt;</span>{{message}}<span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">span</span><span style=\"color: #808080;\">&gt;</span></div><div>    <span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">div</span><span style=\"color: #808080;\">&gt;</span></div><div>    <span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">script</span> <span style=\"color: #9cdcfe;\">src</span>=<span style=\"color: #ce9178;\">\"vue.min.js\"</span><span style=\"color: #808080;\">&gt;</span><span style=\"color: #808080;\">&lt;</span><span style=\"color: #808080;\">/</span><span style=\"color: #569cd6;\">script</span><span style=\"color: #808080;\">&gt;</span></div><div>    <span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">script</span><span style=\"color: #808080;\">&gt;</span></div><div>        <span style=\"color: #9cdcfe;\">Vue</span>.<span style=\"color: #dcdcaa;\">component</span>(<span style=\"color: #ce9178;\">'my-component'</span>,{</div><div>            <span style=\"color: #9cdcfe;\">template:</span><span style=\"color: #ce9178;\">'&lt;button @click=\"sendData\"&gt;向父组件传值&lt;/button&gt;'</span>,</div><div>            <span style=\"color: #9cdcfe;\">methods:</span>{</div><div>                <span style=\"color: #dcdcaa;\">sendData</span><span style=\"color: #9cdcfe;\">:</span><span style=\"color: #569cd6;\">function</span> (<span style=\"color: #9cdcfe;\">e</span>) {</div><div>                    <span style=\"color: #6a9955;\">//1.子组件通过this.$emit(key,value)传递值给父组件</span></div><div>                    <span style=\"color: #569cd6;\">this</span>.<span style=\"color: #dcdcaa;\">$emit</span>(<span style=\"color: #ce9178;\">'message'</span>,<span style=\"color: #ce9178;\">'我是子组件要传递给父组件的值'</span>);</div><div>                }</div><div>            }</div><div>        })</div><div>        <span style=\"color: #569cd6;\">var</span> <span style=\"color: #9cdcfe;\">app</span> = <span style=\"color: #569cd6;\">new</span> <span style=\"color: #4ec9b0;\">Vue</span>({</div><div>            <span style=\"color: #9cdcfe;\">el:</span><span style=\"color: #ce9178;\">'#app'</span>,</div><div>            <span style=\"color: #9cdcfe;\">data:</span>{</div><div>                <span style=\"color: #9cdcfe;\">message:</span><span style=\"color: #ce9178;\">'1'</span>,</div><div>            },</div><div>            <span style=\"color: #9cdcfe;\">methods:</span> {<span style=\"color: #6a9955;\">//4、此处必须是methods，不能是计算属性,mounted等</span></div><div>                <span style=\"color: #6a9955;\">//3.处理数据</span></div><div>                <span style=\"color: #dcdcaa;\">getMsg</span><span style=\"color: #9cdcfe;\">:</span><span style=\"color: #569cd6;\">function</span> (<span style=\"color: #9cdcfe;\">msg</span>) {</div><div>                    <span style=\"color: #569cd6;\">this</span>.<span style=\"color: #9cdcfe;\">message</span> = <span style=\"color: #9cdcfe;\">msg</span>;</div><div>                }</div><div>            }</div><div>        })</div><div>    <span style=\"color: #808080;\">&lt;</span><span style=\"color: #808080;\">/</span><span style=\"color: #569cd6;\">script</span><span style=\"color: #808080;\">&gt;</span></div><div><span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">body</span><span style=\"color: #808080;\">&gt;</span></div><div><span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">html</span><span style=\"color: #808080;\">&gt;</span></div></div></div><span style=\"color: rgb(79, 79, 79); font-family: &quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif; font-size: 16px; background-color: rgb(238, 240, 244);\">3、父组件，子组件，兄弟组件相互传值------&gt;需要bus中央总线，相当于一个中介</span><br><div><span style=\"color: rgb(79, 79, 79); font-family: &quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif; font-size: 16px; background-color: rgb(238, 240, 244);\"><br></span></div><div><div style=\"color: rgb(212, 212, 212); background-color: rgb(30, 30, 30); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; line-height: 19px; white-space: pre;\"><div><span style=\"color: #808080;\">&lt;!</span><span style=\"color: #569cd6;\">DOCTYPE</span> <span style=\"color: #9cdcfe;\">html</span><span style=\"color: #808080;\">&gt;</span></div><div><span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">html</span> <span style=\"color: #9cdcfe;\">lang</span>=<span style=\"color: #ce9178;\">\"en\"</span><span style=\"color: #808080;\">&gt;</span></div><div><span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">head</span><span style=\"color: #808080;\">&gt;</span></div><div>    <span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">meta</span> <span style=\"color: #9cdcfe;\">charset</span>=<span style=\"color: #ce9178;\">\"UTF-8\"</span><span style=\"color: #808080;\">&gt;</span></div><div>    <span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">title</span><span style=\"color: #808080;\">&gt;</span>Title<span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">title</span><span style=\"color: #808080;\">&gt;</span></div><div><span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">head</span><span style=\"color: #808080;\">&gt;</span></div><div><span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">body</span><span style=\"color: #808080;\">&gt;</span></div><div>    <span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">div</span> <span style=\"color: #9cdcfe;\">id</span>=<span style=\"color: #ce9178;\">\"app\"</span><span style=\"color: #808080;\">&gt;</span></div><div>        {{message}}</div><div>        <span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">my-component</span><span style=\"color: #808080;\">&gt;&lt;/</span><span style=\"color: #569cd6;\">my-component</span><span style=\"color: #808080;\">&gt;</span></div><div>        <span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">my-component1</span><span style=\"color: #808080;\">&gt;&lt;/</span><span style=\"color: #569cd6;\">my-component1</span><span style=\"color: #808080;\">&gt;</span></div><div>    <span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">div</span><span style=\"color: #808080;\">&gt;</span></div><div>    <span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">script</span> <span style=\"color: #9cdcfe;\">src</span>=<span style=\"color: #ce9178;\">\"vue.min.js\"</span><span style=\"color: #808080;\">&gt;</span><span style=\"color: #808080;\">&lt;</span><span style=\"color: #808080;\">/</span><span style=\"color: #569cd6;\">script</span><span style=\"color: #808080;\">&gt;</span></div><div>    <span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">script</span><span style=\"color: #808080;\">&gt;</span></div><div>        <span style=\"color: #6a9955;\">//定义中央总线bus</span></div><div>        <span style=\"color: #569cd6;\">var</span> <span style=\"color: #9cdcfe;\">bus</span> = <span style=\"color: #569cd6;\">new</span> <span style=\"color: #4ec9b0;\">Vue</span>();</div><div> </div><div>        <span style=\"color: #6a9955;\">//组件1</span></div><div>        <span style=\"color: #9cdcfe;\">Vue</span>.<span style=\"color: #dcdcaa;\">component</span>(<span style=\"color: #ce9178;\">'my-component'</span>,{</div><div>            <span style=\"color: #9cdcfe;\">template:</span><span style=\"color: #ce9178;\">'&lt;button @click=\"btnClick\"&gt;click&lt;/button&gt;'</span>,</div><div>            <span style=\"color: #9cdcfe;\">methods:</span>{</div><div>                <span style=\"color: #dcdcaa;\">btnClick</span><span style=\"color: #9cdcfe;\">:</span><span style=\"color: #569cd6;\">function</span> () {</div><div>                    <span style=\"color: #6a9955;\">//通过bus中央总线传值,使用bus.$emit(key,value);</span></div><div>                    <span style=\"color: #9cdcfe;\">bus</span>.<span style=\"color: #dcdcaa;\">$emit</span>(<span style=\"color: #ce9178;\">'data'</span>,<span style=\"color: #b5cea8;\">111111</span>)</div><div>                }</div><div>            }</div><div>        })</div><div>        <span style=\"color: #6a9955;\">//组件2</span></div><div>        <span style=\"color: #9cdcfe;\">Vue</span>.<span style=\"color: #dcdcaa;\">component</span>(<span style=\"color: #ce9178;\">'my-component1'</span>,{</div><div>            <span style=\"color: #dcdcaa;\">data</span><span style=\"color: #9cdcfe;\">:</span><span style=\"color: #569cd6;\">function</span>(){</div><div>                <span style=\"color: #c586c0;\">return</span> {</div><div>                    <span style=\"color: #9cdcfe;\">msg:</span><span style=\"color: #ce9178;\">'第二个组件'</span></div><div>                }</div><div>            },</div><div>            <span style=\"color: #9cdcfe;\">template:</span><span style=\"color: #ce9178;\">'&lt;span&gt;{{msg}}&lt;/span&gt;'</span>,</div><div> </div><div>            <span style=\"color: #6a9955;\">//兄弟组件：通过bus中央总线接收值,使用bus.$on(key,function(){...});</span></div><div>            <span style=\"color: #6a9955;\">//此处需要使用钩子函数：mounted</span></div><div>            <span style=\"color: #dcdcaa;\">mounted</span><span style=\"color: #9cdcfe;\">:</span><span style=\"color: #569cd6;\">function</span> () {</div><div>                <span style=\"color: #569cd6;\">var</span> <span style=\"color: #9cdcfe;\">_this</span> = <span style=\"color: #569cd6;\">this</span>; <span style=\"color: #6a9955;\">//此处注意this指向</span></div><div>                <span style=\"color: #9cdcfe;\">bus</span>.<span style=\"color: #dcdcaa;\">$on</span>(<span style=\"color: #ce9178;\">'data'</span>,<span style=\"color: #569cd6;\">function</span> (<span style=\"color: #9cdcfe;\">msg1</span>) {</div><div>                    <span style=\"color: #dcdcaa;\">alert</span>(<span style=\"color: #9cdcfe;\">msg1</span>)</div><div>                    <span style=\"color: #9cdcfe;\">_this</span>.<span style=\"color: #9cdcfe;\">msg</span> = <span style=\"color: #9cdcfe;\">msg1</span>;</div><div>                })</div><div>            }</div><div>        })</div><div> </div><div>        <span style=\"color: #569cd6;\">var</span> <span style=\"color: #9cdcfe;\">app</span> = <span style=\"color: #569cd6;\">new</span> <span style=\"color: #4ec9b0;\">Vue</span>({</div><div>            <span style=\"color: #9cdcfe;\">el:</span> <span style=\"color: #ce9178;\">'#app'</span>,</div><div>            <span style=\"color: #9cdcfe;\">data:</span>{</div><div>                <span style=\"color: #9cdcfe;\">message:</span><span style=\"color: #ce9178;\">'this is message'</span></div><div>            },</div><div>            <span style=\"color: #6a9955;\">//父组件：通过bus中央总线接收值,使用bus.$on(key,function(){...});</span></div><div>            <span style=\"color: #6a9955;\">//此处需要使用钩子函数：mounted</span></div><div>            <span style=\"color: #dcdcaa;\">mounted</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #569cd6;\">function</span> () {</div><div>                <span style=\"color: #569cd6;\">var</span> <span style=\"color: #9cdcfe;\">_this</span> = <span style=\"color: #569cd6;\">this</span>;</div><div>                <span style=\"color: #9cdcfe;\">bus</span>.<span style=\"color: #dcdcaa;\">$on</span>(<span style=\"color: #ce9178;\">'data'</span>,<span style=\"color: #569cd6;\">function</span> (<span style=\"color: #9cdcfe;\">msg</span>) {</div><div>                    <span style=\"color: #9cdcfe;\">_this</span>.<span style=\"color: #9cdcfe;\">message</span> = <span style=\"color: #9cdcfe;\">msg</span></div><div>                })</div><div> </div><div>            }</div><div>        })</div><div>    <span style=\"color: #808080;\">&lt;</span><span style=\"color: #808080;\">/</span><span style=\"color: #569cd6;\">script</span><span style=\"color: #808080;\">&gt;</span></div><div><span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">body</span><span style=\"color: #808080;\">&gt;</span></div><div><span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">html</span><span style=\"color: #808080;\">&gt;</span></div></div></div><font color=\"#4f4f4f\" face=\"Microsoft YaHei, SF Pro Display, Roboto, Noto, Arial, PingFang SC, sans-serif\"><span style=\"background-color: rgb(238, 240, 244);\">4.bus总线的另一种处理方式：将bus对象直接挂到Vue根实例上</span></font><div><font color=\"#4f4f4f\" face=\"Microsoft YaHei, SF Pro Display, Roboto, Noto, Arial, PingFang SC, sans-serif\"><span style=\"background-color: rgb(238, 240, 244);\"><br></span></font></div><div><div style=\"color: rgb(212, 212, 212); background-color: rgb(30, 30, 30); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; line-height: 19px; white-space: pre;\"><div><span style=\"color: #c586c0;\">import</span> <span style=\"color: #9cdcfe;\">Vue</span> <span style=\"color: #c586c0;\">from</span> <span style=\"color: #ce9178;\">'vue'</span></div><div><span style=\"color: #569cd6;\">const</span> <span style=\"color: #9cdcfe;\">Bus</span> = <span style=\"color: #569cd6;\">new</span> <span style=\"color: #4ec9b0;\">Vue</span>()</div><div> </div><div><span style=\"color: #569cd6;\">const</span> <span style=\"color: #9cdcfe;\">app</span>= <span style=\"color: #569cd6;\">new</span> <span style=\"color: #4ec9b0;\">Vue</span>({</div><div>    <span style=\"color: #9cdcfe;\">el:</span><span style=\"color: #ce9178;\">'#app'</span>,</div><div>　　 <span style=\"color: #9cdcfe;\">data:</span>{</div><div>　　　　<span style=\"color: #9cdcfe;\">Bus</span></div><div>    }</div><div>    <span style=\"color: #9cdcfe;\">router</span>,</div><div>    <span style=\"color: #9cdcfe;\">store</span></div><div>});</div><div> </div><div><span style=\"color: #6a9955;\">// 组件中使用</span></div><div><span style=\"color: #569cd6;\">this</span>.<span style=\"color: #9cdcfe;\">$root</span>.<span style=\"color: #9cdcfe;\">Bus</span>.<span style=\"color: #dcdcaa;\">$on</span>()</div><div><span style=\"color: #569cd6;\">this</span>.<span style=\"color: #9cdcfe;\">$root</span>.<span style=\"color: #9cdcfe;\">Bus</span>.<span style=\"color: #dcdcaa;\">$emit</span>()</div></div></div>"
                        }
                    ]
                },
                {
                    "name": "vuex辅助函数",
                    "detailOption": [
                        {
                            "name": "mapState、mapGetters、mapMutations、mapActions等辅助函数",
                            "description": "<div>State</div><div>1.state中的数据，组件中如何获取</div><div><br></div><div>&nbsp; this.$store.state.xxx属性</div><div>2.mapState辅助函数&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</div><div><br></div><div>1.引入mapState</div><div>&nbsp; &nbsp; import {mapState} from 'vuex'</div><div>2.在computed计算属性中使用</div><div>&nbsp; &nbsp; export default{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; computed:mapState(</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ['count']</div><div>&nbsp; &nbsp; &nbsp; &nbsp; )</div><div>&nbsp; &nbsp; &nbsp; }</div><div>3.计算属性，使用了mapState作为辅助函数，其他计算属性怎么写？</div><div><br></div><div>//mapState 函数返回的是一个对象</div><div>//ES6&nbsp; 对象展开运算符...mapState(['count'])</div><div>export default{</div><div>&nbsp; &nbsp; computed:{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ...mapState(['count']),//一起使用时，ES6使用对象展开运算符此对象混入到外部对象中</div><div>&nbsp; &nbsp; &nbsp; &nbsp; message(){//其他计算属性</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return xxxx;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div>}</div><div>Getter</div><div>1.store.js中的getters，组件中如何获取？</div><div><br></div><div>this.$store.getters.xxxx(getters名称)</div><div>2.store.js中的getters，如何接收多个参数？</div><div><br></div><div>//state作为第一个参数接收,(id,name)作为其他两个参数接收,也可以接收一个对象</div><div>getters:{</div><div>&nbsp; &nbsp; increMethod:(state)=&gt;(id,name)=&gt;{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; console.log(id)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if(id&lt;1){</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if(name === 'lucy'){</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return state.count ++;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }else{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 'not lucy';</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }else{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 88;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div>}&nbsp;&nbsp;</div><div>&nbsp;</div><div>//在组件中使用</div><div>export default({</div><div>&nbsp; &nbsp; computed:{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; xxx(){</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return this.$store.getters.increMethod(0,'ll');&nbsp; //这么加参数</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div>})</div><div>&nbsp;</div><div>//辅助函数mapGetters加参数</div><div>待继续研究</div><div>3.mapGetters辅助函数</div><div><br></div><div>1.引入mapGetters</div><div>&nbsp; &nbsp; import {mapGetters} from 'vuex'</div><div>2.其他操作与mapState辅助属性类似，此处不再过多描述</div><div>4.计算属性，使用了mapGetters作为辅助函数，其他计算属性怎么写</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp;与mapState辅助属性类似，此处也不再过多描述</div><div><br></div><div>Mutations</div><div>1.store.js中的mutations，组件中如何执行？</div><div><br></div><div>//1.普通执行</div><div>this.$store.commit('xxx');//xxx指mutations名称</div><div>//2.如果有对象形式的参数时(此处对应下面2中mutaions接收对象情况使用)</div><div>this.$store.commit({</div><div>&nbsp; &nbsp; type:'increment',</div><div>&nbsp; &nbsp; num:10</div><div>})</div><div>2.在store.js中编写mutations，可以接收多个参数，也可以接收对象</div><div><br></div><div>//接收多个参数</div><div>mutations:{</div><div>&nbsp; &nbsp; increment(state,n){</div><div>&nbsp; &nbsp; &nbsp; &nbsp; state.count += n;</div><div>&nbsp; &nbsp; }</div><div>}</div><div>//接收对象</div><div>mutations:{</div><div>&nbsp; &nbsp; increment(state,obj){</div><div>&nbsp; &nbsp; &nbsp; &nbsp; state.count += obj.num;</div><div>&nbsp; &nbsp; }</div><div>}</div><div>3.使用常量替代 Mutation 事件类型</div><div><br></div><div>&nbsp; &nbsp; &nbsp; 1.为什么要用常量替代Mutation事件？</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 可以将所有的Mutation事件，写入到一个单独的文件中，然后通过常量来替代，可以方便开发者对项目中所有Mutation</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;事件一目了然</div><div><br></div><div>&nbsp; &nbsp; &nbsp;2.如何使用常量来替代？</div><div><br></div><div>1.创建一个单独文件mutation_type.js</div><div>2.在js中定义常量信息</div><div>&nbsp; export const SOME_MUTATION = 'SOME_MUTATION'</div><div>3.在store.js中，通过import引入</div><div>&nbsp; import {SOME_MUTATION} from './mutation_type.js'</div><div>4.常量在mutations中如何使用</div><div>&nbsp; mutations:{</div><div>&nbsp; &nbsp; &nbsp; [SOME_MUTATION] (state){</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //这就是使用常量替代Mutation</div><div>&nbsp; &nbsp; &nbsp; }</div><div>&nbsp; }</div><div>4.如何在组件中执行Mutation方法（mapMutations辅助函数的使用）</div><div><br></div><div>1.普通执行</div><div>&nbsp; &nbsp; this.$store.commit('xxx')提交</div><div>2.使用mapMutations辅助函数</div><div>&nbsp; &nbsp; 1.引入mapMutations</div><div>&nbsp; &nbsp; &nbsp; &nbsp; import {mapMutations} from 'vuex'</div><div>&nbsp; &nbsp; 2.在methods方法中使用</div><div>&nbsp; &nbsp; &nbsp; &nbsp; export default({</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; methods:{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ...mapMutations:(</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ['increment']</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; })</div><div>5.在组件中执行Mutations，能否对mutations的名称进行修改(设置别名)？</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp;store.js中定义的名称为add的mutation方法，但是在组件中，我已经在methods中定义了一个名称为add的方法，这时候就需要用到mapMutations辅助函数来设置一个别名了</div><div><br></div><div>//store.js</div><div>export default new Vuex.Store({</div><div>&nbsp; &nbsp; mutations:{//mutations中定义了一个add方法</div><div>&nbsp; &nbsp; &nbsp; &nbsp; add:(state)=&gt;{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; state.count ++;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div>})</div><div>//组件中</div><div>export default({</div><div>&nbsp; &nbsp; methods:{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; add(){...},//组件中，已经存在名称为add的方法</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ...mapMutations({</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; increment:'add'//故使用辅助函数，将该方法别名为increment,然后通过increment访问即可，其实就是在访问store.js中的名称为add的mutations方法</div><div>&nbsp; &nbsp; &nbsp; &nbsp; })</div><div>&nbsp; &nbsp; }<span style=\"white-space:pre\">\t</span></div><div>})</div><div>//在组件中如何使用呢？</div><div>&lt;button @click=\"increment\"&gt;mapMutations++&lt;/button&gt;</div><div>6.store.js中的mutations有多个参数，使用辅助函数能否实现多个参数传递？？</div><div><br></div><div>//mapMutations辅助函数，也可以传递参数，目前我发现只能传递一个参数,多个参数建议传递一个对象。有待继续研究</div><div>//store.js</div><div>export default new Vuex.Store({</div><div>&nbsp; &nbsp; mutations:{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; increment:(state,obj)=&gt;{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log(obj.n)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log(obj.name)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if(obj.name == 'liu'){</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; state.count+=obj.n;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }else{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; state.count ++;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div>})</div><div>//组件中</div><div>export default({</div><div>&nbsp; &nbsp; methods:{//二选一</div><div>&nbsp; &nbsp; &nbsp; &nbsp; //1.不改别名类型的(此处看不到任何参数信息)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ...mapMutations(['increment'])</div><div>&nbsp; &nbsp; &nbsp; &nbsp; //2.可以改别名的(此处看不到任何参数信息)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ...mapMutations({</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; add:'increment'&nbsp; &nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; })</div><div>&nbsp; &nbsp; }<span style=\"white-space:pre\">\t</span></div><div>})</div><div>//组件中如何使用呢(直接在后面加参数即可，此处是一个对象参数)</div><div>&lt;button @click=\"increment({n:8,name:'liu'})\"&gt;mapMutations++++&lt;/button&gt;</div><div>或者</div><div>&lt;button @click=\"add({n:8,name:'liu'})\"&gt;mapMutations++++&lt;/button&gt;</div><div>7.mutations中执行的都是同步事务操作</div><div><br></div><div>&nbsp; &nbsp; &nbsp;最好不要再mutations中执行异步操作。如果异步操作数据了，组件在commit 后，数据不能立即改变，而且不知道什么时候会改变。处理异步操作，可在一下的actions中进行。</div><div><br></div><div>Actions</div><div>1.actions和mutations有什么区别？</div><div><br></div><div>&nbsp; &nbsp;①Action 提交的是 mutation，而不是直接变更状态。</div><div>&nbsp; &nbsp;②Action 可以包含任意异步操作。</div><div><br></div><div>2.store.js中，actions如何编写？</div><div><br></div><div>//store.js中，编写一个名称为incrementAction的action</div><div>export default new Vuex.Store({</div><div>&nbsp; &nbsp; actions:{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; incrementAction(context){</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; context.commit('increment')</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div>})</div><div>//简化代码：我们可以使用ES6参数解构来简化代码（特别是我们需要调用 commit 很多次的时候）</div><div>export default new Vuex.Store({</div><div>&nbsp; &nbsp; actions:{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; incrementAction( {commit}){</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; commit('increment')</div><div>&nbsp; &nbsp; }</div><div>}</div><div>3.组件中，actions如何来分发mutations？</div><div><br></div><div>//有两种方式</div><div>1.普通分发</div><div>&nbsp; &nbsp; this.$store.dispatch('xxx',{amout:10})&nbsp; &nbsp;</div><div>2.对象方式分发</div><div>&nbsp; &nbsp; this.$store.dispatch({</div><div>&nbsp; &nbsp; &nbsp; &nbsp; type:'xxx',</div><div>&nbsp; &nbsp; &nbsp; &nbsp; amount:10</div><div>&nbsp; &nbsp; })</div><div>4.使用mapActions辅助函数，来分发mutations</div><div>&nbsp; &nbsp;mapActions辅助函数的使用方法，与mapMutations类似，即①可以修改名称②可以接收参数信息。可以参考mapMutations</div><div><br></div><div>5.组合actions的使用</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; Action 通常是异步的，那么如何知道 action 什么时候结束呢？更重要的是，我们如何才能组合多个 action，以处理更加复杂的异步流程？</div><div><br></div><div>&nbsp; &nbsp;①Promise实现</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp;Promise是一种异步方案它有3种状态：Pending(进行中)、Resolved(已完成)、Rejected(已失败)。</div><div><br></div><div>//使用Promise实现的关闭定时器方案：</div><div>export default new Vuex.Store({</div><div>&nbsp; &nbsp; actions:{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; actionA({state,commit}){</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; let id = null;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; const promise = new Promise((resolve,reject)=&gt;{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; id = setInterval(()=&gt;{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; commit('increment',{n:22,name:'liu'});</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if(state.count&gt;100) resolve(state.count);&nbsp; &nbsp;//会跳到then()</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if(state.count==99) reject(state.count);&nbsp; //会跳到catch(error)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },1000);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; });</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; promise.then((value)=&gt;{//then()部分</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log(id);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; clearInterval(id);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }).catch((error)=&gt;{//异常处理部分</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log('fail',error)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; })</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div>})</div><div>&nbsp; &nbsp;②在组件中，可以这么来使用组合action(可能还有更好的写法，有待研究)</div><div><br></div><div>export default({</div><div>&nbsp; &nbsp; methods:{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; multiAction(){//使用组合action</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.$store.dispatch('actionB').then(()=&gt;{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if(this.count&gt;100){</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.$store.dispatch('actionC').then(()=&gt;{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; alert(\"完毕\")</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; })</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; })</div><div>&nbsp; &nbsp; }</div><div>})</div><div>&nbsp; &nbsp;③在store.js中，使用组合action</div><div><br></div><div>export default new Vuex.Store({</div><div>&nbsp; &nbsp; actions:{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; actionD({state,commit,dispatch}){</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; let id ;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; const promise = new Promise((resolve,reject)=&gt;{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; id = setInterval(()=&gt;{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; commit('increment',{n:28,name:'liu'});</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log(state.count);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if(state.count&gt;100){</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; resolve(state.count);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },1000)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; });</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; promise.then((value)=&gt;{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; clearInterval(id)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dispatch('actionC');//或者commit('其他的mutations')</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log(\"完毕\")</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; })</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div>})</div><div>&nbsp; &nbsp;④使用async/await，组合action</div><div><br></div><div>&nbsp; &nbsp; &nbsp; async/await还在进一步了解中，有点疑问，后续会补的</div><div><br></div><div>&nbsp; &nbsp; &nbsp; 参考：https://vuex.vuejs.org/zh/guide/actions.html</div><div><br></div><div>Module</div><div>1.如何将单一store.js拆分成多个模块？</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</div><div><br></div><div>//切记：子模块是这么定义的,而不是const moduleA = new Vuex.Store({...})</div><div>const moduleA = {</div><div>&nbsp; state: { ... },</div><div>&nbsp; mutations: { ... },</div><div>&nbsp; actions: { ... },</div><div>&nbsp; getters: { ... }</div><div>}</div><div>&nbsp;</div><div>const moduleB = {</div><div>&nbsp; state: { ... },</div><div>&nbsp; mutations: { ... },</div><div>&nbsp; actions: { ... }</div><div>}</div><div>&nbsp;</div><div>const store = new Vuex.Store({</div><div>&nbsp; modules: {</div><div>&nbsp; &nbsp; a: moduleA,</div><div>&nbsp; &nbsp; b: moduleB</div><div>&nbsp; }</div><div>})</div><div>&nbsp;</div><div>store.state.a // -&gt; moduleA 的状态</div><div>store.state.b // -&gt; moduleB 的状态</div><div>2.在模块moduleA/moduleB中，如何获取兄弟节点module/根节点store中的一些属性？</div><div><br></div><div>const moduleA ={</div><div>&nbsp; &nbsp; actions:{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; moduleAAction({state,commit,rootState}){</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //state----&gt;为子节点状态，即当前moduleA</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //rootState---&gt;即父模块状态,即store</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //通过state.count---&gt;来获取模块中的state变量</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //通过rootState.count---&gt;来获取父模块中的state变量</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log('moduleA模块中的count属性值:'+state.count);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log('父模块中的hello属性值:'+rootState.hello);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log('兄弟模块moduleB中的count属性:'+rootState.moduleB.count);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; commit('moduleAIncr');</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div>}</div><div>3.命名空间</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 默认情况下，模块内部的 action、mutation 和 getter 是注册在全局命名空间的，这样使得多个模块能够对同一 mutation 或 action 作出响应。</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 如果希望你的模块具有更高的封装度和复用性，你可以通过添加 namespaced:true 的方式使其成为带命名空间的模块。当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名</div>"
                        }
                    ]
                }
            ]
        }
    ]

    //更新windowData
    window.windowData &&  addData(window.windowData, data);
    !window.windowData && (window.windowData = data);
})


